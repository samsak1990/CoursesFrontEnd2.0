// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è EventEmitter
// üìù–û–ø–∏—Å–∞–Ω–∏–µ
// –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å EventEmitter, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏. –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å:
// –ü–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è (on) ‚Äì –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
// –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (once) ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Å–ª–µ —á–µ–≥–æ —É–¥–∞–ª–∏—Ç—Å—è.
// –û—Ç–ø–∏—Å–∫—É (off) ‚Äì —É–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è.
// –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è (emit) ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è.

class EventEmitter {
  constructor() {
    this.events = {};
  }

  on(type, fn) {
    if (typeof fn !== "function") {
      throw new Error("Function wasn't passed in second proper!");
    }
    if (!this.events[type]) {
      this.events[type] = [];
    }
    this.events[type].push(fn);
  }

  once(type, fn) {
    const reFn = (data) => {
      fn(data);
      this.off(type, reFn);
    };
    this.on(type, reFn);
  }

  off(type, fn) {
    if (!this.events[type]) {
      throw new Error("Function is not found in system!");
    }
    this.events[type] = this.events[type].filter((funcEvents) => {
      return funcEvents !== fn;
    });
  }

  emit(type, data) {
    if (!this.events[type]) {
      throw new Error("Method is not found in system!");
    }
    this.events[type].forEach((func) => {
      func(data);
    });
  }
}

function onMessage(data) {
  console.log("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", data);
}

const emitter = new EventEmitter();

emitter.on("message", onMessage);
emitter.emit("message", "Hello!");
emitter.emit("message", "Hello again!");
emitter.off("message", onMessage);
emitter.emit("message", "Hello!");
emitter.once("greet", (name) => console.log(`Hello, ${name}!`));
emitter.emit("greet", "–ê–Ω–¥—Ä–µ–π");
emitter.emit("greet", "–ê–Ω–¥—Ä–µ–π");
